MONGO_URI=mongodb+srv://mhaopash:NeCvDAppGG1XAfHF@note-application.jzbecm5.mongodb.net/

JWT_SECRET=nbdjsbfbfjhfdsjkfddhfdhklsfdkjsfdjsfdjhksfdvbxkj

PORT=5000

# NeCvDAppGG1XAfHF

# mhaopash

 
# /*Alternative MERN Stack Test Task
# Objective:
# Build a Collaborative Notes Application with real-time updates.

# Requirements:
# Core Features:
# 1.Authentication:
# oUse JWT for authentication.
# oImplement signup, login, and logout functionality.
# oRoles: "Admin" and "User".


# 2.Note Management:
# oUsers should be able to create, UPDATE, delete, and view their notes.
# oEach note should include:
# Title (string, max 100 characters, required)
# Content (string, max 1000 characters, required)
# Tags (array of strings, optional)
# Created At (timestamp)
# Last Updated (timestamp)
# oAdmins can view and manage all users' notes.


# 3.Real-Time Collaboration:
# oEnable multiple users to edit a note simultaneously with updates reflecting in real-time (e.g., using WebSockets or libraries like Socket.IO).
# oDisplay who is currently editing the note.




# 4.API Endpoints:
# oAuthentication:
# /auth/signup
# /auth/login


# oNotes:
# /notes: Create and fetch notes (GET, POST).
# /notes/:id: Update and delete notes (PUT, DELETE).


# oAdmin:
# /admin/users: View all registered users and their notes (Admin only).


# 5.Frontend:
# oDevelop a responsive UI using React.js.
# oInclude the following pages:
# Login and Signup.
# Dashboard (list of user’s notes).
# Note Editor (real-time collaboration feature).
# Admin Panel (for admins only).
# oUse a modern UI library (e.g., Material-UI, Tailwind CSS).



# 6.Database:
# oUse MongoDB with appropriate schema design:
# Users collection (with roles and hashed passwords).
# Notes collection (associated with user IDs).


# 7.Real-Time Feature:
# oImplement real-time updates during collaboration using WebSockets.
# oFor simplicity, lock editing for users when someone else is actively editing, with a timeout mechanism (e.g., auto-release lock after inactivity).




# 8.Deployment:
# oDeploy the application (frontend and backend) on any platform like Vercel, Netlify, Heroku, or AWS.
# oProvide the URLs for the deployed application.

# Extras (Optional, Bonus Points):
# 1.Search and filter notes by title or tags.
# 2.Implement dark mode for the UI.
# 3.Add unit tests for one or more key components (e.g., an API route or front-end component).
# 4.Optimize the database with indexing on frequently queried fields.
# 5.Include rate-limiting and security best practices (e.g., using Helmet.js for HTTP headers).
# 6.Add activity logs showing note edits or user activity in real-time.

# Submission Guidelines:
# 1.Upload the codebase to a public GitHub repository.
# 2.Include a README.md with:
# oSetup and installation instructions.
# oAny assumptions, challenges, or design choices made.
# oLinks to the deployed frontend and backend.

# Evaluation Criteria:
# 1.Technical Skills:
# oEfficient use of MERN stack (MongoDB, Express, React, Node.js).
# oClean, well-structured, and maintainable code.
# 2.Creativity:
# oInnovative features or ideas.
# 3.Real-Time Implementation:
# oFunctional and efficient real-time updates with minimal latency.
# 4.Scalability:
# oApplication can be scaled easily for multiple users and large data volumes.
# 5.Deployment:
# oSeamless and well-documented deployment.

# This task evaluates the candidate's proficiency in MERN development, real-time application design, scalability, and their ability to manage complex features like role-based access control and real-time collaboration.


// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const token = request.cookies.get('authData')?.value;

  if (!token) {
    return NextResponse.redirect(new URL('/login', request.url));
  }

  try {
    const { roles } = JSON.parse(token);

    // Only allow Admins to access /dashboard
    if (!roles?.includes('Admin') && request.nextUrl.pathname.startsWith('/dashboard')) {
      return NextResponse.redirect(new URL('/notes', request.url));
    }
  } catch (e) {
    return NextResponse.redirect(new URL('/login', request.url));
  }

  return NextResponse.next(); 
}

export const config = {
  matcher: ['/dashboard']
}